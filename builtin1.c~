#include "shell.h"

int shell_env(char **args, char __attribute__((__unused__)) **cmdline);
int shell_setenv(char **args, char __attribute__((__unused__)) **cmdline);
int shell_unsetenv(char **args, char __attribute__((__unused__)) **cmdline);

/**
 * shell_env - To print the current environment.
 * @args: Array of arguments passed to the shell.
 * @cmdline: A double pointer to the beginning of args.
 *
 * Description: Prints one variable per line in the
 *              format 'variable'='value'.
 * 
 * Return: 1 0n error, else 0.
 */
int shell_env(char **args, char __attribute__((__unused__)) **cmdline)
{
	int i;
	char nc = '\n';

	if (!environ)
		return (-1);

	for (i = 0; environ[i]; i++)
	{
		write(STDOUT_FILENO, environ[i], _strlen(environ[i]));
		write(STDOUT_FILENO, &nc, 1);
	}

	(void)args;
	return (0);
}

/**
 * shell_setenv - To changes or add environmental variable to PATH.
 * @args: Array of arguments passed to the shell.
 * @cmdline: A double pointer to the beginning of args.
 * Description: args[1] is the name of the new or existing PATH variable.
 *              args[2] is the value to set the new or changed variable to.
 *
 * Return: 1, else 0 if error occurs.
 */
int shell_setenv(char **args, char __attribute__((__unused__)) **cmdline)
{
	char **env_v = NULL, **new_environ, *new_value;
	size_t sz;
	int i;

	if (!args[0] || !args[1])
		return (create_error(args, -1));

	new_value = malloc(_strlen(args[0]) + 1 + _strlen(args[1]) + 1);
	if (!new_value)
		return (create_error(args, -1));
	_strcpy(new_value, args[0]);
	_strcat(new_value, "=");
	_strcat(new_value, args[1]);

	env_v = env_get(args[0]);
	if (env_v)
	{
		free(*env_v);
		*env_v = new_value;
		return (0);
	}
	for (sz = 0; environ[sz]; sz++)
		;

	new_environ = malloc(sizeof(char *) * (sz + 2));
	if (!new_environ)
	{
		free(new_value);
		return (create_error(args, -1));
	}

	for (i = 0; environ[i]; i++)
		new_environ[i] = environ[i];

	free(environ);
	environ = new_environ;
	environ[i] = new_value;
	environ[i + 1] = NULL;

	return (0);
}

/**
 * shell_unsetenv - Deletes an environmental variable from the PATH.
 * @args: An array of arguments passed to the shell.
 * @cmdline: A double pointer to the beginning of args.
 * 
 * Description: args[1] is the PATH variable to remove.
 *
 * Return: 1 0n error, else 0.
 */
int shell_unsetenv(char **args, char __attribute__((__unused__)) **cmdline)
{
	char **env_v, **new_environ;
	size_t sz;
	int i, i2;

	if (!args[0])
		return (create_error(args, -1));
	env_v = env_get(args[0]);
	if (!env_v)
		return (0);

	for (sz = 0; environ[sz]; sz++)
		;

	new_environ = malloc(sizeof(char *) * sz);
	if (!new_environ)
		return (create_error(args, -1));

	for (i = 0, i2 = 0; environ[i]; i++)
	{
		if (*env_v == environ[i])
		{
			free(*env_v);
			continue;
		}
		new_environ[i2] = environ[i];
		i2++;
	}
	free(environ);
	environ = new_environ;
	environ[sz - 1] = NULL;

	return (0);
}
